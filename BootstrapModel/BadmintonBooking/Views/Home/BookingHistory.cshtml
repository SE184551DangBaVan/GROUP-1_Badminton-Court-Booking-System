@model IEnumerable<BadmintonBooking.Models.Booking>
@{
    ViewData["Title"] = "BookingHistory";
    Layout = null;
}

<head>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Righteous&display=swap">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap">
    <style>
        body {
            /* solid background */
            background: rgb(0,212,255);
            /* gradient background */
            background: linear-gradient(45deg, rgba(0,212,255,1) 0%, rgba(11,3,45,1) 100%);
            /* photo background */
            background-image: url('../pictures/background-badminton.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        .event-container {
            width: 1200px;
            backdrop-filter: blur(16px) saturate(180%);
            -webkit-backdrop-filter: blur(16px) saturate(180%);
            background-color: rgba(17, 25, 40, 0.25);
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.125);
            padding: 38px;
            filter: drop-shadow(0 30px 10px rgba(0,0,0,0.125));
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            text-align: center;
        }

        .wrapper {
            width: 100%;
            height: 100%;
        }

        .banner-image {
            height: 300px;
            width: 100%;
            border-radius: 12px;
            border: 1px solid rgba(255,255,255, 0.255);
            overflow: hidden;
        }

            .banner-image img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                object-position: center;
            }

        h1 {
            font-family: 'Righteous', sans-serif;
            color: rgba(255,255,255,0.98);
            text-transform: uppercase;
            font-size: 2.4rem;
        }

        p {
            color: #fff;
            font-family: 'Lato', sans-serif;
            text-align: center;
            font-size: 0.8rem;
            line-height: 150%;
            letter-spacing: 2px;
            text-transform: uppercase;
        }

        .button-wrapper {
            margin-top: 18px;
        }

        .btn {
            border: none;
            padding: 12px 24px;
            border-radius: 24px;
            font-size: 12px;
            font-size: 0.8rem;
            letter-spacing: 2px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

            .btn + .btn {
                margin-left: 10px;
            }

        .outline {
            background: transparent;
            color: rgba(0, 212, 255, 0.9);
            border: 1px solid rgba(0, 212, 255, 0.6);
            transition: all .3s ease;
        }

            .outline:hover {
                transform: scale(1.125);
                color: rgba(255, 255, 255, 0.9);
                border-color: rgba(255, 255, 255, 0.9);
                transition: all .3s ease;
            }

        .fill {
            background: rgba(0, 212, 255, 0.9);
            color: rgba(255,255,255,0.95);
            filter: drop-shadow(0);
            font-weight: bold;
            transition: all .3s ease;
        }

            .fill:hover {
                transform: scale(1.125);
                border-color: rgba(255, 255, 255, 0.9);
                filter: drop-shadow(0 10px 5px rgba(0,0,0,0.125));
                transition: all .3s ease;
            }

        .timeslots-section {
            position: absolute;
            top: 0;
            right: -200px; /* Adjust based on desired width */
            width: 200px;
            height: 100%;
            background-color: #f0f0f0;
            transition: right 0.3s ease;
            overflow: hidden;
        }

        .card.show-timeslots .timeslots-section {
            right: 0;
        }
    </style>
</head>
<body>
    @if (Model == null || !Model.Any())
    {
        <h1>You don't have any bookings now</h1>
    }
    else
    {
        @foreach (var item in Model)
        {
            <div class="event-container">
                <div class="wrapper">
                    <div class="banner-image">
                        <img src="/Upload/Image/@item.Co.CoPath" class="img-fluid" alt="@item.Co.CoName">
                    </div>
                    <p>Court Name: @Html.DisplayFor(modelItem => item.Co.CoName)</p>
                    <p>Address: @Html.DisplayFor(modelItem => item.Co.CoAddress)</p>
                    <p>Type of Booking: @Html.DisplayFor(modelItem => item.BBookingType)</p>
                    <p>Date of Booking: @Html.DisplayFor(modelItem => item.Payments.FirstOrDefault().PDateTime)</p>
                    <div class="button-wrapper">
                        <a class="btn fill" asp-action="Invoice" asp-controller="PayPal" asp-route-bid="@item.BId" style="text-decoration: none; display: inline-block;">See Invoice</a>
                    </div>
                </div>
            </div>
            }
    }
    </div>
<@* div class="container">
    <div class="wrapper">
        <div class="banner-image"> </div>
        <h1> Toyota Supra</h1>
        <p>
            Lorem ipsum dolor sit amet, <br />
            consectetur adipiscing elit.
        </p>
    </div>
    <div class="button-wrapper">
        <button class="btn outline">DETAILS</button>
        <button class="btn fill">BUY NOW</button>
    </div>
</div> *@


@* register action *@
 @*        [AllowAnonymous]
        [HttpPost]
        public async Task<IActionResult> Register(RegisterVM model, List<string> SelectedRoles)
        {
            if (!User.IsInRole("Admin"))
            {
                return Forbid();
            }

            Response response = new Response();
            try
            {
                if (ModelState.IsValid)
                {
                    var chkEmail = await _userManager.FindByEmailAsync(model.Email);
                    if (chkEmail != null)
                    {
                        ModelState.AddModelError(string.Empty, "Email already exists");
                        return View(model);
                    }

                    bool createdByAdmin = User.IsInRole("Admin");

                    var user = new IdentityUser()
                    {
                        UserName = model.Email,
                        Email = model.Email,
                        EmailConfirmed = createdByAdmin
                    };

                    var result = await _userManager.CreateAsync(user, model.Password);
                    if (result.Succeeded)
                    {
                        if (SelectedRoles != null && SelectedRoles.Any())
                        {
                            await _userManager.AddToRolesAsync(user, SelectedRoles);
                        }

                        if (!createdByAdmin)
                        {
                            // Send confirmation email only if not created by admin
                            var userId = await _userManager.GetUserIdAsync(user);
                            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                            var confirmationLink = Url.Action("ConfirmMail", "Account", new { userId = userId, Token = code }, protocol: Request.Scheme);
                            string emailBody = GetEmailBody(model.Email, "Email Confirmation", confirmationLink, "EmailConfirmation");
                            bool status = await _emailSender.EmailSendAsync(model.Email, "Email Confirmation", emailBody);
                            if (status)
                            {
                                response.Message = "Please check your email for verification";
                                return RedirectToAction("ForgetPasswordConfirmation", "Account", response);
                            }
                        }

                        return RedirectToAction("show", "admin");
                    }
                    if (result.Errors.Count() > 0)
                    {
                        foreach (var error in result.Errors)
                        {
                            ModelState.AddModelError(string.Empty, error.Description);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                // Log the exception
            }
            return View(model);
        } *@
</div>
</body>